[done] * set implementation, type-totally:< - caseymc
  (set:make symbol? symbol? ...) --> set
  (set:add set? symbol? ...) --> set
[done] * type data type - ahaven
  (type:make symbol? ...) --> type
  (type:make (type?) type?) --> type
  (type:union type? ...) --> type
* type:<
[done] * built in's types - katfang


FUTURE
* set! - if it sets to a different type, is that "wrong"? Or do we just have set! change the type of the variable?

---4/23---

Goal: Put in a function's code, get its type.

* Make a version of the evaluator that analyzes type
  ** Make type-eval so that this is possible; use propagators somehow
* Decide how to "save" known typed things - put them in the environment 
  that stores all the other types?
     name -> {code} [+ {type info = cell} ]

* So how do propagators give us an answer?
  build-type-cell expr env -> cell
  primitive-application
  application
  cond
  if
  et cetera

* (build-type-cell (f e1 e2) env)
    (build-type-cell f env) -> cf
    (build-type-cell e1 env) -> ce1
    (build-type-cell e2 env) -> ce1
    (make-cell) -> cout
    ce1 <= (input-type cf 1)
    ce2 <= (input-type cf 2)
    (output-type cf) <= cout

* v      <=    t
  [3 10]       [3 10]
  vhi  := min(thi,  vhi)
  tlow := max(tlow, vlow)

---5/3---
1) Figure out what we need.
  - 12 minute presentation
  - some sort of report ??????????? 
2) Finish implementation
  - Show that we can do fib / factorial
  - Define a variable; apply a function on the variable.
  - Special Forms that we have
    - if / cond
  - When define a function
    - build/hookup a cell in environment
  - (type-eval variable)
    - just a read / run propagator
  - NOW
    * handler for lambda
      - glue together cells for variables inside the lambda and return of lambda with type of function
    * handler for apply
      - glue together inputs to function with function and get the cell that is the result of the function application
    * look up cells for type-eval [put in var env; get type]
    * putting things into environment 
      - define [needs to be modified to build-type-cell]
    * fix begin for build-type-cell; in particular, might have side-effects like defines (and later set!)
    * move (initialize-schedule) from interpreter/interp.scm to somewhere sensable so that we don't wipe old cells. However, we may need to wipe some cells.
    * TEST AND CREATE DEMO
  - FUTURE
    - Do list type
      - Show that map works
    - set!
3) Make presenation
  - Introduction
  - Demo at beginning 
  - Our type implementation / lattice
  - Modifications to enviroment
    - Adding types to environments [to be later explained]
    - calling type-eval
  - Cells
    - How cells are hooked together 
    - What a cell looks like
    - Interval
  - Demo at end
4) Make report: Probably looks the same as presentation hopefully plus some more stuff.
