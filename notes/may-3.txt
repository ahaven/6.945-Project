* Pull the lambda for defhandler eval ... lambda? out.
  * It will need to be referenced for both eval and when defining compound functions in type-extract. 


]=> (define a (lambda (b c) (+ b c))) 
  This will do:
    (eval (lambda (b c) (+ b c))) -> compound-procedure
    (type-extract the thing that popped out of the above eval)
      This actually sees that it's a compound-procedure and spits out [*the-nothing*]
    Ties it together to 'a in the environment

* type-extract will need to actually look at the compound procedure and build out the cell if it finds *the-nothing*
  - except for this probably happens in some function called (get-var-type var env)



# This on here is kind of a hack which has to do if we do something like
  (type-extract (lambda (b c) (+ b c)))
]=> (type-extract ...)
  - creates new environment
  - points 'answer -> ...
  - returns type of 'answer
  - we do this because just calling type-eval on the lambda will return *the-nothing*

# This one here is unsolved
(type-extract ((lambda (a) (+ 3 a)) 4))
  - As far as we can tell, will get a compound-procedure and *the-nothing* and now we need to apply it.


PROMISES MAY BE THE ANSWER TO EVERYTHING


Think about
- promises maybe
- apply
- how does type-extract even turn a *the-nothing* into something useful?
