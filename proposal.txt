                          6.945 Final Project Proposal
                          Drew Haven (ahaven@mit.edu)
                        Katherine Fang (katfang@mit.edu)

--------------------------------------------------------------------------------
Problem Domain
--------------------------------------------------------------------------------

We are interested in building a type checking and inference system based on
propagators. The propagator system seems ideal for use in a type system because
the main problem in inferring types is that of propagating around known types of
subexpressions. Our system will take as input some code and will calculate the
resulting output type and whether there are type errors.

The type system will be richer than in the simple type system presented in
Pavel's lecture -- at the very least, we do not want to lose information when
taking the join of multiple types. We're going to try to make the join of two
types into a type representing the least upper bound of those two types, though
we'll see later if this gets too unwieldy.

--------------------------------------------------------------------------------
Major Components
--------------------------------------------------------------------------------

1) Type System
   a) The types we want to work with
   b) Annotating variables and functions
2) Type Checking
3) Type Inference

--------------------------------------------------------------------------------
Implementation Plans
--------------------------------------------------------------------------------

We will implement this by modifying one of the evaluators we have looked at
earlier in this class. To start, we want to implement a type checker for some
simple types such as numbers, symbols, and functions. The major relation needed
in a type checker is a lattice of types, the order on which we'll call type:<=.
Defined entities (both Scheme primitives and user-defined functions and
variables) will need to be annotated with their type data, which will be done in
the internals of the evaluator. After this we have two different directions to
work in: the inference engine and extending the expressiveness of types.

We will implement the inference engine using propogators. For each
subexpression, we will have one cell representing its type. Relations between
these cells will be our type checking rules: the return type of a function is
the join of the types of its possible return values, the inputs to a function
are type:<= to the function's input types, etc.

The goal of extending the expressiveness of types is to allow us to capture more
information and provide better type checking. For example, one intended
extension is to allow for more specific types of lists such as lists of numbers.
Other types that may also be interesting include how to handle trees or other
data structures that are in fact comparable under type:<=, as well as parametric
function types like map.

